import { E as EgwApp, a as egw, c as Et2Dialog, k as app } from '../../chunks/etemplate2-e2c3d5d4.js';
import '../../chunks/egw_json-1e02cacd.js';
import '../../vendor/bower-asset/jquery/dist/jquery.min.js';
import '../../vendor/bower-asset/cropper/dist/cropper.min.js';
import '../../vendor/tinymce/tinymce/tinymce.min.js';

function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

/**
 * UI for EGroupware AI Assistant application
 */
class AIAssistantApp extends EgwApp {
  constructor() {
    super(...arguments);
    _defineProperty(this, "isLoading", false);
  }
  /**
   * This function is called when the etemplate2 object is loaded
   */
  et2_ready(et2, name) {
    super.et2_ready(et2, name);
    if (name === 'aiassistant.index') {
      this.init_ai_assistant();
    }
  }

  /**
   * Initialize the AI assistant interface
   */
  init_ai_assistant() {
    // Set focus on input field
    var input = this.et2.getWidgetById('message_input');
    if (input) {
      input.focus();
    }

    // Load and display chat history
    this.load_chat_history();

    // Auto-scroll to bottom of messages
    this.scroll_to_bottom();
  }

  /**
   * Handle keypress in message input
   */
  handle_keypress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
      // Enter key without Shift
      event.preventDefault();
      this.send_message();
    }
  }

  /**
   * Send a message to the AI assistant
   */
  send_message() {
    if (this.isLoading) {
      return;
    }
    var input = this.et2.getWidgetById('message_input');
    if (!input) {
      console.error('Message input not found');
      return;
    }
    var message = input.get_value().trim();
    if (!message) {
      return;
    }

    // Clear input
    input.set_value('');

    // Add user message to display
    this.add_message('user', message);

    // Show loading state
    this.set_loading(true);

    // Send to server with proper parameter format
    egw.json('aiassistant.EGroupware\\AIAssistant\\Ui.ajax_api', ['send_message', message], this.handle_response.bind(this), this, true, this).sendRequest();
  }

  /**
   * Handle response from server
   */
  handle_response(data) {
    this.set_loading(false);
    if (data.error) {
      this.show_error(data.error);
      return;
    }
    if (data.response) {
      // Add assistant response
      this.add_message('assistant', data.response.content);

      // Add tool calls if any
      if (data.response.tool_calls && data.response.tool_calls.length > 0) {
        for (var i = 0; i < data.response.tool_calls.length; i++) {
          this.add_tool_call(data.response.tool_calls[i]);
        }
      }
    }
  }

  /**
   * Add a message to the chat display
   */
  add_message(type, content) {
    var container = this.et2.getWidgetById('messages_container');
    if (!container) {
      console.error('Messages container not found');
      return;
    }
    var containerNode = container.getDOMNode();

    // Remove empty state if it exists
    var emptyState = containerNode.querySelector('.aiassistant_empty_state');
    if (emptyState) {
      emptyState.remove();
    }

    // Create message structure
    var messageDiv = document.createElement('div');
    messageDiv.className = 'aiassistant_message ' + type;

    // Add avatar
    var avatarDiv = document.createElement('div');
    avatarDiv.className = 'aiassistant_avatar';
    avatarDiv.textContent = type === 'user' ? 'U' : 'AI';

    // Add message bubble
    var bubbleDiv = document.createElement('div');
    bubbleDiv.className = 'aiassistant_message_bubble';
    bubbleDiv.textContent = content;

    // Add timestamp
    var metaDiv = document.createElement('div');
    metaDiv.className = 'aiassistant_message_meta';
    metaDiv.textContent = new Date().toLocaleTimeString();
    messageDiv.appendChild(avatarDiv);
    messageDiv.appendChild(bubbleDiv);
    messageDiv.appendChild(metaDiv);
    containerNode.appendChild(messageDiv);
    this.scroll_to_bottom();
  }

  /**
   * Add a tool call display
   */
  add_tool_call(tool_call) {
    var container = this.et2.getWidgetById('messages_container');
    if (!container) return;
    var containerNode = container.getDOMNode();
    var toolDiv = document.createElement('div');
    toolDiv.className = 'aiassistant_message tool';
    var avatarDiv = document.createElement('div');
    avatarDiv.className = 'aiassistant_avatar';
    avatarDiv.style.background = 'linear-gradient(135deg, #4ecdc4 0%, #44a08d 100%)';
    avatarDiv.textContent = 'üîß';
    var toolContent = document.createElement('div');
    toolContent.className = 'aiassistant_message_bubble aiassistant_tool_bubble';
    var toolHeader = document.createElement('div');
    toolHeader.className = 'aiassistant_tool_header';
    toolHeader.innerHTML = "<span class=\"aiassistant_tool_icon\">\uD83D\uDEE0\uFE0F</span> <strong>".concat(tool_call.function.name, "</strong>");
    var toolArgs = document.createElement('details');
    toolArgs.className = 'aiassistant_tool_details';
    var summary = document.createElement('summary');
    summary.textContent = 'View Parameters';
    summary.style.cursor = 'pointer';
    summary.style.color = '#667eea';
    var argsContent = document.createElement('pre');
    argsContent.className = 'aiassistant_tool_args';
    argsContent.textContent = JSON.stringify(tool_call.function.arguments, null, 2);
    toolArgs.appendChild(summary);
    toolArgs.appendChild(argsContent);
    toolContent.appendChild(toolHeader);
    toolContent.appendChild(toolArgs);
    if (tool_call.result) {
      var resultDiv = document.createElement('div');
      resultDiv.className = 'aiassistant_tool_result';
      resultDiv.style.marginTop = '12px';
      resultDiv.style.padding = '12px';
      resultDiv.style.borderRadius = '8px';
      if (tool_call.result.success) {
        resultDiv.style.background = 'linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%)';
        resultDiv.style.border = '1px solid #b8dacc';
        resultDiv.style.color = '#155724';
        resultDiv.innerHTML = "<strong>\u2705 Success:</strong> ".concat(tool_call.result.message || 'Operation completed');
      } else {
        resultDiv.style.background = 'linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%)';
        resultDiv.style.border = '1px solid #f1b0b7';
        resultDiv.style.color = '#721c24';
        resultDiv.innerHTML = "<strong>\u274C Error:</strong> ".concat(tool_call.result.error || 'Operation failed');
      }
      toolContent.appendChild(resultDiv);
    }
    toolDiv.appendChild(avatarDiv);
    toolDiv.appendChild(toolContent);
    containerNode.appendChild(toolDiv);
    this.scroll_to_bottom();
  }

  /**
   * Set loading state
   */
  set_loading(loading) {
    this.isLoading = loading;
    var sendButton = this.et2.getWidgetById('send_button');
    var statusMessage = this.et2.getWidgetById('status_message');
    if (sendButton) {
      sendButton.set_disabled(loading);
    }
    if (statusMessage) {
      if (loading) {
        statusMessage.set_value('ü§î AI is thinking...');
        statusMessage.set_class('aiassistant_status loading');
      } else {
        statusMessage.set_value('‚úÖ Ready');
        statusMessage.set_class('aiassistant_status connected');
      }
    }

    // Add/remove typing indicator
    if (loading) {
      this.add_typing_indicator();
    } else {
      this.remove_typing_indicator();
    }
  }

  /**
   * Add typing indicator
   */
  add_typing_indicator() {
    var container = this.et2.getWidgetById('messages_container');
    if (!container) return;
    var containerNode = container.getDOMNode();

    // Remove existing typing indicator
    var existing = containerNode.querySelector('.aiassistant_typing_indicator');
    if (existing) {
      existing.remove();
    }

    // Create typing indicator
    var typingDiv = document.createElement('div');
    typingDiv.className = 'aiassistant_message assistant aiassistant_typing_indicator';
    var avatarDiv = document.createElement('div');
    avatarDiv.className = 'aiassistant_avatar';
    avatarDiv.textContent = 'AI';
    var bubbleDiv = document.createElement('div');
    bubbleDiv.className = 'aiassistant_message_bubble';
    bubbleDiv.style.padding = '16px 20px';
    var dotsDiv = document.createElement('div');
    dotsDiv.className = 'aiassistant_typing_dots';
    dotsDiv.innerHTML = '<span></span><span></span><span></span>';
    bubbleDiv.appendChild(dotsDiv);
    typingDiv.appendChild(avatarDiv);
    typingDiv.appendChild(bubbleDiv);
    containerNode.appendChild(typingDiv);
    this.scroll_to_bottom();
  }

  /**
   * Remove typing indicator
   */
  remove_typing_indicator() {
    var container = this.et2.getWidgetById('messages_container');
    if (!container) return;
    var containerNode = container.getDOMNode();
    var indicator = containerNode.querySelector('.aiassistant_typing_indicator');
    if (indicator) {
      indicator.remove();
    }
  }

  /**
   * Show error message
   */
  show_error(error) {
    egw.message(error, 'error');
    this.add_message('assistant', '‚ùå Sorry, I encountered an error: ' + error);
    var statusMessage = this.et2.getWidgetById('status_message');
    if (statusMessage) {
      statusMessage.set_value('‚ùå Error occurred');
      statusMessage.set_class('aiassistant_status disconnected');
    }
  }

  /**
   * Load chat history from server
   */
  load_chat_history() {
    egw.json('aiassistant.EGroupware\\AIAssistant\\Ui.ajax_api', ['get_history'], this.display_history.bind(this), this, true, this).sendRequest();
  }

  /**
   * Display chat history
   */
  display_history(data) {
    if (!data || !data.history || data.history.length === 0) {
      return; // Keep empty state
    }

    // Clear empty state first
    var container = this.et2.getWidgetById('messages_container');
    if (container) {
      var containerNode = container.getDOMNode();
      var emptyState = containerNode.querySelector('.aiassistant_empty_state');
      if (emptyState) {
        emptyState.remove();
      }
    }
    for (var i = 0; i < data.history.length; i++) {
      var entry = data.history[i];
      this.add_message(entry.message_type, entry.message_content);
      if (entry.tool_calls) {
        try {
          var toolCalls = typeof entry.tool_calls === 'string' ? JSON.parse(entry.tool_calls) : entry.tool_calls;
          if (Array.isArray(toolCalls)) {
            for (var j = 0; j < toolCalls.length; j++) {
              this.add_tool_call(toolCalls[j]);
            }
          }
        } catch (e) {
          console.warn('Failed to parse tool calls:', e);
        }
      }
    }
  }

  /**
   * Clear chat history
   */
  clear_history() {
    Et2Dialog.show_dialog(button => {
      if (button === Et2Dialog.YES_BUTTON) {
        this.do_clear_history();
      }
    }, 'Are you sure you want to clear your chat history? This action cannot be undone.', 'Clear Chat History', {}, Et2Dialog.BUTTONS_YES_NO, Et2Dialog.QUESTION_MESSAGE);
  }

  /**
   * Actually clear the history
   */
  do_clear_history() {
    egw.json('aiassistant.EGroupware\\AIAssistant\\Ui.ajax_api', ['clear_history'], this.handle_clear_response.bind(this), this, true, this).sendRequest();
  }

  /**
   * Handle clear history response
   */
  handle_clear_response(data) {
    if (data.success) {
      // Clear the display
      var container = this.et2.getWidgetById('messages_container');
      if (container) {
        var containerNode = container.getDOMNode();

        // Clear all messages
        while (containerNode.firstChild) {
          containerNode.removeChild(containerNode.firstChild);
        }

        // Add empty state back
        var emptyStateDiv = document.createElement('div');
        emptyStateDiv.className = 'aiassistant_empty_state';
        var iconDiv = document.createElement('div');
        iconDiv.className = 'aiassistant_empty_state_icon';
        iconDiv.textContent = 'üí¨';
        var titleDiv = document.createElement('div');
        titleDiv.className = 'aiassistant_empty_state_title';
        titleDiv.textContent = 'Welcome to EGroupware AI Assistant';
        var textDiv = document.createElement('div');
        textDiv.className = 'aiassistant_empty_state_text';
        textDiv.textContent = 'I can help you create contacts, schedule events, search your data, and more. Just ask me in natural language!';
        emptyStateDiv.appendChild(iconDiv);
        emptyStateDiv.appendChild(titleDiv);
        emptyStateDiv.appendChild(textDiv);
        containerNode.appendChild(emptyStateDiv);
      }
      egw.message('Chat history cleared successfully', 'success');
    } else {
      egw.message('Failed to clear chat history: ' + (data.error || 'Unknown error'), 'error');
    }
  }

  /**
   * Scroll messages container to bottom
   */
  scroll_to_bottom() {
    setTimeout(() => {
      var container = this.et2.getWidgetById('messages_container');
      if (container) {
        var containerNode = container.getDOMNode();
        containerNode.scrollTop = containerNode.scrollHeight;
      }
    }, 100);
  }
}

// Register the app with EGroupware
app.classes.aiassistant = AIAssistantApp;
//# sourceMappingURL=app.min.js.map
